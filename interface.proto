syntax = "proto3";

///////////////
// Map Keys and Values
///////////////

enum MappingKeyType {
    DOMAIN = 1
    EMAIL = 2;
    ALIAS = 3;
    URL = 4;
}

message Email {
    string address = 1;
    string domain = 2;
}
message Alias {
    oneof alias {
        Domain domain = 1;
        Email email = 2;
    }
}
message MappingKey {
    oneof key {
        string domain = 1;
        Email email = 2;
        Alias alias = 3;
        string url = 4;
    }
}

enum MappingValueType {
    PUBLIC_KEY = 1
    INFO = 2;
    HASH = 3;
    URL_COMMITMENT = 4;
    POLICY = 5;
}
message MappingValue {
    oneof value {
        string public_key = 1;
        Info info = 2;
        string hash = 3;
        UrlCommitment commitment = 4;
        string policy = 5;
    }

    message Info {
        string name = 1;
        string address = 2;
    }
    message Hash {
        string hash = 1;
    }
    message UrlCommitment {
        string commitment_url = 1;
        string expiry_time = 2;
    }
}

///////////////
// Rules
///////////////

message OpIdentity {
    Alias alias = 1;
}

message OpNOfMIdentities {
    repeated Alias alias = 1;
    int required_number = 2;
}

message OpLockoutTime {
    string field_name = 1;      // Not sure how to do this one
}

message Operation {
    op oneof {
        OpIdentity identity = 1;
        OpNOfMIdentities n_of_m = 2;
        OpLockoutTime lockout = 3;
    }
}

// Rule is satisfied if all of the operations complete and pass
message TransitionRule {
    repeated Operation = 1;
}

///////////////
// Mappings
///////////////

message Mapping {
    string id = 1;
    repeated TransitionRule transition_rule = 2;   // only one of the rules need to be met to pass
    MappingKeyType key_type = 3;
    MappingValueType value_type = 4;
}

///////////////
// Mapping Management Calls
///////////////

message CreateMappingRequest {
    TransitionRule transition_rule = 1;
    MappingKeyType key_type = 3;
    MappingValueType value_type = 4;
}

message CreateMappingResponse {
    Mapping mapping = 1;
}

rpc CreateMapping (CreateMappingRequest) returns (CreateMappingResponse);

///////////////
// Mapping Function Calls
///////////////
message Signature {
    Alias alias = 4;    
    string signature = 5;
}
message UpdateRequest {
    string mapping_id = 1;
    MappingKey key = 2;
    Mappingvalue value = 3;
    repeated Operation additional_ops = 4; 
    repeated Signature signature = 5;
}
message UpdateResponse {}
rpc Update (UpdateRequest) returns (UpdateResponse);

message CreateRequest {
    string mapping_id = 1;
    MappingKey key = 2;
    MappingValue value = 3;
    repeated Operation additional_ops = 4; 
    repeated Signature signature = 5;
}
message CreateResponse {}
rpc Create (CreateRequest) returns (CreateResponse);

message GetRequest {
    string mapping_id = 1;
    MappingKey key = 2;
}

message GetResponse {
    string mapping_id = 1;
    MappingValue value = 2;
}
rpc Get (GetRequest) returns (GetResponse);
