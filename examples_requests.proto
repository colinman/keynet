/////////////////
// Keynet Identity Map (default)
/////////////////

// Create the mapping
message CreateMappingRequest {
    mapping = Mapping {
        id = "keynet",
        create_validator = [ "bootstrap_validator": Validator {
            operation = [
                // bootstrap with CAs
                OpCASignature {
                    enabled = true
                },
            ]
        }],
        update_validator = [ "identity_validator": Validator {
            operation = [
                // require keynet signature for updates
                "owner": OpOwnerSignature {
                    enabled = true
                }
                
                // allow n of m signatures, but defaults to always false until 
                // modified by entry update
                "multisig": OpNOfMSignatures {}
            ]
        }]
        key_type = ALIAS
        value_type = PUBLIC_KEY
    }
}

// Create an entry
message UpdateRequest {
    update = EntryUpdate {
        mapping_id = "keynet",       
        key = Alias {
            Email {
                address = "colinman@stanford.edu"
                domain = "stanford.edu"
            }
        }
        value = "{public key here}"
    },
    signature = ["{stanford.edu CA PKI-based signature to prove ownership}"]
}

// Update entry to require n of m signatures 
// for future updates
message UpdateRequest {
    update = EntryUpdate {
        mapping_id = "keynet",       
        key = Alias {
            Email {
                address = "colinman@stanford.edu"
                domain = "stanford.edu"
            }
        }
        value = "{new public key here}"
        update_validator = [ "identity_validator": Validator {
            operation = [
                // disable signature update
                "owner": OpOwnerSignature {
                    enabled = false                    
                }

                // allow n of m update
                "multisig": OpNOfMSignatures {
                    alias = ["eff.org", "mozilla.org", "ietf.org"],
                    required_number = 2
                    
                }
            ]
        }]
    },
    signature = ["{sig1}", "sig2", "sig3"]
}

/////////////////
// Binary Hashes
/////////////////

// Create the mapping
message CreateMappingRequest {
    mapping = Mapping {
        id = "binary",
        create_validator = [ "bootstrap_validator": Validator {
            operation = [
                // require keynet signature for updates
                "owner": OpOwnerSignature {
                    enabled = true
                }
            ]
        }],
        update_validator = [ "identity_validator": Validator {
            operation = [
                // require keynet signature for updates
                "owner": OpOwnerSignature {
                    enabled = true
                }
                
                // allow n of m signatures, but defaults to always false until 
                // modified by entry update
                "multisig": OpNOfMSignatures {}
            ]
        }]

        key_type = URL
        value_type = SHA256HASH
    }
}

// Create an entry
message UpdateRequest {
    update = EntryUpdate {
        mapping_id = "binary",       
        key = Url {
            path = "/download/file.zip"
            domain = "stanford.edu"
        }
        value = "{hash value here}"
    },
    signature = ["{signature of EntryUpdate}"]
}

// Update entry to require n of m signatures 
// for future updates
message UpdateRequest {
    update = EntryUpdate {
        mapping_id = "binary",       
        key = Url {
            path = "/download/file.zip"
            domain = "stanford.edu"
        }
        value = "{hash value here}"
        update_validator = [ "identity_validator": Validator {
            operation = [
                // Note that the "owner" operation is omitted, so it is not updated. The end result
                // of the update is that either n of m signatures or identity signature will be allowed
                // to update the entry.

                // allow n of m update
                "multisig": OpNOfMSignatures {
                    alias = ["eff.org", "mozilla.org", "ietf.org"],
                    required_number = 2
                    
                }
            ]
        }]
    },
    signature = ["{sig1}", "sig2", "sig3"]
}